#define yy_create_buffer vlog_file_create_buffer
#define yy_delete_buffer vlog_file_delete_buffer
#define yy_scan_buffer vlog_file_scan_buffer
#define yy_scan_string vlog_file_scan_string
#define yy_scan_bytes vlog_file_scan_bytes
#define yy_flex_debug vlog_file_flex_debug
#define yy_init_buffer vlog_file_init_buffer
#define yy_flush_buffer vlog_file_flush_buffer
#define yy_load_buffer_state vlog_file_load_buffer_state
#define yy_switch_to_buffer vlog_file_switch_to_buffer
#define yyin vlog_filein
#define yyleng vlog_fileleng
#define yylex vlog_filelex
#define yyout vlog_fileout
#define yyrestart vlog_filerestart
#define yytext vlog_filetext

#line 19 "lib/opt/lex_n_yacc/vlog_file.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn - rch
#pragma warn - use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n)                                  \
	do                                               \
	{                                                \
		/* Undo effects of setting up yytext. */       \
		*yy_cp = yy_hold_char;                         \
		YY_RESTORE_YY_MORE_OFFSET                      \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ;  \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
	} while (0)

#define unput(c) yyunput(c, yytext_ptr)

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
{
	FILE *yy_input_file;

	char *yy_ch_buf;	/* input buffer */
	char *yy_buf_pos; /* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars; /* number of characters read into yy_ch_buf */

int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *)0;
static int yy_init = 1;	 /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO((FILE * input_file));

void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE * file, int size));
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE *file));
void yy_flush_buffer YY_PROTO((YY_BUFFER_STATE b));
#define YY_FLUSH_BUFFER yy_flush_buffer(yy_current_buffer)

YY_BUFFER_STATE yy_scan_buffer YY_PROTO((char *base, yy_size_t size));
YY_BUFFER_STATE yy_scan_string YY_PROTO((yyconst char *yy_str));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO((yyconst char *bytes, int len));

static void *yy_flex_alloc YY_PROTO((yy_size_t));
static void *yy_flex_realloc YY_PROTO((void *, yy_size_t));
static void yy_flex_free YY_PROTO((void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                     \
	{                                                            \
		if (!yy_current_buffer)                                    \
			yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
		yy_current_buffer->yy_is_interactive = is_interactive;     \
	}

#define yy_set_bol(at_bol)                                     \
	{                                                            \
		if (!yy_current_buffer)                                    \
			yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
		yy_current_buffer->yy_at_bol = at_bol;                     \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *)0, *yyout = (FILE *)0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((yyconst char msg[]));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION      \
	yytext_ptr = yy_bp;            \
	yyleng = (int)(yy_cp - yy_bp); \
	yy_hold_char = *yy_cp;         \
	*yy_cp = '\0';                 \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
static yyconst short int yy_accept[192] =
		{0,
		 0, 0, 0, 0, 0, 0, 0, 0, 45, 43,
		 42, 41, 34, 35, 37, 36, 43, 30, 39, 38,
		 40, 31, 32, 33, 43, 31, 31, 31, 31, 31,
		 31, 31, 31, 31, 31, 5, 4, 5, 9, 8,
		 9, 13, 12, 13, 2, 1, 0, 30, 31, 0,
		 0, 0, 0, 0, 31, 31, 31, 31, 31, 31,
		 31, 31, 31, 31, 31, 31, 31, 3, 0, 0,
		 1, 0, 0, 0, 0, 0, 31, 31, 31, 31,
		 31, 31, 31, 26, 31, 31, 31, 31, 31, 31,
		 0, 0, 31, 0, 0, 31, 0, 0, 0, 31,

		 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		 31, 31, 25, 0, 0, 0, 0, 0, 0, 31,
		 31, 31, 23, 21, 31, 31, 31, 31, 31, 31,
		 10, 29, 0, 0, 0, 0, 0, 0, 24, 31,
		 31, 17, 22, 31, 31, 31, 31, 0, 0, 0,
		 0, 0, 31, 31, 31, 6, 27, 28, 0, 0,
		 0, 0, 0, 31, 31, 31, 0, 11, 0, 0,
		 0, 18, 31, 19, 0, 0, 0, 14, 31, 7,
		 15, 0, 14, 31, 15, 0, 20, 0, 16, 16,
		 0

};

static yyconst int yy_ec[256] =
		{0,
		 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
		 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 2, 4, 4, 4, 4, 4, 4, 5, 6,
		 7, 8, 4, 9, 4, 10, 11, 12, 13, 14,
		 14, 14, 14, 14, 14, 14, 14, 15, 16, 4,
		 17, 4, 4, 1, 18, 18, 18, 18, 18, 18,
		 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
		 18, 18, 18, 18, 18, 18, 18, 19, 18, 20,
		 21, 22, 23, 4, 18, 24, 25, 26, 27, 28,

		 29, 30, 31, 18, 32, 18, 33, 34, 35, 36,
		 37, 38, 18, 39, 40, 41, 42, 43, 44, 45,
		 46, 47, 4, 4, 4, 4, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1};

static yyconst int yy_meta[48] =
		{0,
		 1, 1, 2, 3, 3, 3, 3, 3, 3, 4,
		 4, 5, 5, 5, 3, 3, 3, 5, 5, 5,
		 4, 5, 3, 3, 5, 5, 5, 5, 5, 5,
		 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		 5, 5, 5, 5, 5, 5, 5};

static yyconst short int yy_base[201] =
		{0,
		 0, 0, 45, 46, 47, 48, 49, 52, 406, 462,
		 462, 462, 462, 462, 462, 462, 48, 52, 462, 462,
		 462, 39, 462, 462, 41, 50, 52, 58, 62, 64,
		 70, 74, 76, 79, 90, 462, 462, 393, 462, 462,
		 358, 462, 462, 356, 462, 0, 350, 111, 41, 114,
		 0, 335, 318, 313, 99, 108, 110, 112, 116, 120,
		 122, 86, 124, 128, 133, 139, 146, 462, 307, 305,
		 0, 157, 159, 294, 279, 265, 157, 159, 165, 169,
		 171, 162, 174, 177, 193, 184, 195, 197, 201, 203,
		 257, 245, 462, 214, 226, 462, 249, 251, 243, 214,

		 220, 222, 225, 227, 229, 231, 233, 237, 249, 253,
		 255, 267, 260, 229, 239, 278, 234, 231, 216, 272,
		 274, 277, 282, 284, 289, 291, 293, 295, 298, 300,
		 302, 305, 201, 186, 324, 181, 174, 176, 309, 318,
		 320, 322, 327, 329, 331, 344, 346, 174, 154, 145,
		 131, 137, 341, 348, 350, 352, 357, 360, 126, 127,
		 119, 107, 79, 362, 364, 366, 80, 462, 69, 73,
		 64, 368, 375, 377, 43, 58, 45, 0, 379, 462,
		 0, 37, 0, 381, 0, 31, 387, 29, 0, 0,
		 462, 422, 427, 432, 434, 439, 442, 446, 451, 456

};

static yyconst short int yy_def[201] =
		{0,
		 191, 1, 192, 192, 193, 193, 194, 194, 191, 191,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 195, 191, 191, 191, 195, 195, 195, 195, 195,
		 195, 195, 195, 195, 195, 191, 191, 191, 191, 191,
		 191, 191, 191, 191, 191, 196, 191, 191, 195, 191,
		 197, 191, 191, 191, 195, 195, 195, 195, 195, 195,
		 195, 195, 195, 195, 195, 195, 195, 191, 191, 191,
		 196, 191, 191, 191, 191, 191, 195, 195, 195, 195,
		 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 195,

		 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
		 195, 195, 195, 191, 191, 191, 191, 191, 191, 195,
		 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
		 195, 195, 191, 191, 191, 191, 191, 191, 195, 195,
		 195, 195, 195, 195, 195, 195, 195, 191, 191, 191,
		 191, 191, 195, 195, 195, 195, 195, 195, 191, 191,
		 191, 191, 191, 195, 195, 195, 191, 191, 191, 191,
		 191, 195, 195, 195, 191, 191, 191, 198, 195, 191,
		 199, 191, 198, 195, 199, 191, 195, 191, 200, 200,
		 0, 191, 191, 191, 191, 191, 191, 191, 191, 191

};

static yyconst short int yy_nxt[510] =
		{0,
		 10, 11, 12, 10, 10, 13, 14, 10, 15, 16,
		 17, 18, 18, 18, 19, 20, 21, 22, 22, 22,
		 23, 10, 24, 25, 26, 22, 22, 22, 27, 22,
		 22, 28, 22, 22, 29, 22, 30, 31, 32, 33,
		 34, 22, 22, 35, 22, 22, 22, 37, 37, 40,
		 40, 43, 38, 38, 43, 45, 47, 189, 46, 50,
		 51, 50, 51, 48, 48, 48, 188, 52, 186, 53,
		 50, 51, 50, 51, 182, 41, 41, 44, 50, 51,
		 44, 54, 50, 51, 50, 51, 181, 56, 180, 55,
		 50, 51, 178, 57, 50, 51, 50, 51, 58, 50,

		 51, 177, 61, 65, 176, 59, 50, 51, 60, 175,
		 50, 51, 171, 62, 85, 47, 63, 64, 66, 50,
		 51, 67, 48, 48, 48, 73, 73, 73, 50, 51,
		 50, 51, 50, 51, 170, 78, 50, 51, 77, 81,
		 50, 51, 50, 51, 50, 51, 79, 80, 50, 51,
		 169, 83, 84, 50, 51, 168, 82, 167, 88, 50,
		 51, 163, 86, 89, 162, 87, 50, 51, 93, 93,
		 94, 94, 94, 95, 161, 93, 93, 50, 51, 50,
		 51, 96, 50, 51, 90, 50, 51, 160, 100, 50,
		 51, 50, 51, 101, 50, 51, 102, 50, 51, 106,

		 159, 93, 152, 93, 50, 51, 103, 151, 107, 150,
		 104, 149, 105, 50, 51, 50, 51, 50, 51, 108,
		 109, 50, 51, 50, 51, 94, 94, 94, 95, 148,
		 111, 113, 110, 112, 50, 51, 96, 116, 116, 116,
		 50, 51, 50, 51, 120, 50, 51, 50, 51, 50,
		 51, 50, 51, 50, 51, 138, 121, 50, 51, 137,
		 122, 136, 125, 134, 127, 123, 133, 124, 128, 50,
		 51, 119, 126, 50, 51, 50, 51, 118, 132, 132,
		 50, 51, 117, 131, 129, 115, 130, 50, 51, 135,
		 135, 135, 50, 51, 50, 51, 114, 50, 51, 99,

		 96, 140, 50, 51, 50, 51, 98, 139, 141, 50,
		 51, 50, 51, 50, 51, 50, 51, 142, 50, 51,
		 50, 51, 50, 51, 145, 50, 51, 97, 146, 50,
		 51, 143, 92, 144, 91, 135, 135, 135, 50, 51,
		 50, 51, 50, 51, 76, 147, 96, 50, 51, 50,
		 51, 50, 51, 75, 154, 132, 132, 157, 158, 153,
		 155, 50, 51, 74, 50, 51, 50, 51, 50, 51,
		 50, 51, 50, 51, 164, 72, 156, 50, 51, 165,
		 50, 51, 50, 51, 50, 51, 50, 51, 50, 51,
		 172, 70, 166, 69, 174, 50, 51, 50, 51, 50,

		 51, 50, 51, 68, 173, 191, 179, 50, 51, 187,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 184, 36, 36, 36, 36, 36, 39, 39, 39,
		 39, 39, 42, 42, 42, 42, 42, 49, 49, 71,
		 191, 71, 71, 71, 49, 49, 183, 191, 183, 183,
		 183, 185, 191, 185, 185, 185, 190, 191, 190, 190,
		 190, 9, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,

		 191, 191, 191, 191, 191, 191, 191, 191, 191};

static yyconst short int yy_chk[510] =
		{0,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		 1, 1, 1, 1, 1, 1, 1, 3, 4, 5,
		 6, 7, 3, 4, 8, 17, 18, 188, 17, 22,
		 22, 49, 49, 18, 18, 18, 186, 25, 182, 25,
		 26, 26, 27, 27, 177, 5, 6, 7, 28, 28,
		 8, 25, 29, 29, 30, 30, 176, 27, 175, 26,
		 31, 31, 171, 28, 32, 32, 33, 33, 29, 34,

		 34, 170, 32, 34, 169, 30, 62, 62, 31, 167,
		 35, 35, 163, 33, 62, 48, 33, 33, 35, 55,
		 55, 35, 48, 48, 48, 50, 50, 50, 56, 56,
		 57, 57, 58, 58, 162, 56, 59, 59, 55, 58,
		 60, 60, 61, 61, 63, 63, 57, 57, 64, 64,
		 161, 60, 61, 65, 65, 160, 59, 159, 65, 66,
		 66, 152, 63, 66, 151, 64, 67, 67, 72, 72,
		 73, 73, 73, 73, 150, 72, 72, 77, 77, 78,
		 78, 73, 82, 82, 67, 79, 79, 149, 77, 80,
		 80, 81, 81, 78, 83, 83, 78, 84, 84, 82,

		 148, 72, 138, 72, 86, 86, 79, 137, 83, 136,
		 80, 134, 81, 85, 85, 87, 87, 88, 88, 85,
		 86, 89, 89, 90, 90, 94, 94, 94, 94, 133,
		 88, 90, 87, 89, 100, 100, 94, 95, 95, 95,
		 101, 101, 102, 102, 100, 103, 103, 104, 104, 105,
		 105, 106, 106, 107, 107, 119, 101, 108, 108, 118,
		 102, 117, 105, 115, 107, 103, 114, 104, 108, 109,
		 109, 99, 106, 110, 110, 111, 111, 98, 112, 112,
		 113, 113, 97, 111, 109, 92, 110, 112, 112, 116,
		 116, 116, 120, 120, 121, 121, 91, 122, 122, 76,

		 116, 121, 123, 123, 124, 124, 75, 120, 122, 125,
		 125, 126, 126, 127, 127, 128, 128, 125, 129, 129,
		 130, 130, 131, 131, 128, 132, 132, 74, 129, 139,
		 139, 126, 70, 127, 69, 135, 135, 135, 140, 140,
		 141, 141, 142, 142, 54, 130, 135, 143, 143, 144,
		 144, 145, 145, 53, 141, 146, 146, 147, 147, 140,
		 144, 153, 153, 52, 146, 146, 147, 147, 154, 154,
		 155, 155, 156, 156, 153, 47, 145, 157, 157, 154,
		 158, 158, 164, 164, 165, 165, 166, 166, 172, 172,
		 164, 44, 155, 41, 166, 173, 173, 174, 174, 179,

		 179, 184, 184, 38, 165, 9, 173, 187, 187, 184,
		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		 0, 179, 192, 192, 192, 192, 192, 193, 193, 193,
		 193, 193, 194, 194, 194, 194, 194, 195, 195, 196,
		 0, 196, 196, 196, 197, 197, 198, 0, 198, 198,
		 198, 199, 0, 199, 199, 199, 200, 0, 200, 200,
		 200, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,

		 191, 191, 191, 191, 191, 191, 191, 191, 191};

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/vlog_file.l"
#define INITIAL 0
#line 2 "src/vlog_file.l"
// **************************************************************************
// File       [ vlog_file.l ]
// Author     [ littleshamoo ]
// Synopsis   [ lex for reading verilog file ]
// Date       [ Ver. 1.0 started 2010/07/07 ]
// **************************************************************************

#include "vlog_file.h"
#include "vlog_file.tab.hpp"

using namespace std;

int vlog_fileline = 1;
bool vlog_filewarning = 1;

void vlog_fileskipSpecify();
void vlog_fileskipTable();
void vlog_fileskipTimeScale();
void vlog_fileskipCellDef();
void vlog_fileskipEndCellDef();

#define YY_NO_UNPUT 1
#define COMMENT 1

#define SPECIFY 2

#define TABLE 3

#line 593 "lib/opt/lex_n_yacc/vlog_file.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO((int c, char *buf_ptr));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char *, yyconst char *, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char *));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void)fwrite(yytext, yyleng, 1, yyout)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                   \
	if (yy_current_buffer->yy_is_interactive)                               \
	{                                                                       \
		int c = '*', n;                                                       \
		for (n = 0; n < max_size &&                                           \
								(c = getc(yyin)) != EOF && c != '\n';                     \
				 ++n)                                                             \
			buf[n] = (char)c;                                                   \
		if (c == '\n')                                                        \
			buf[n++] = (char)c;                                                 \
		if (c == EOF && ferror(yyin))                                         \
			YY_FATAL_ERROR("input in flex scanner failed");                     \
		result = n;                                                           \
	}                                                                       \
	else                                                                    \
	{                                                                       \
		errno = 0;                                                            \
		while ((result = fread(buf, 1, max_size, yyin)) == 0 && ferror(yyin)) \
		{                                                                     \
			if (errno != EINTR)                                                 \
			{                                                                   \
				YY_FATAL_ERROR("input in flex scanner failed");                   \
				break;                                                            \
			}                                                                   \
			errno = 0;                                                          \
			clearerr(yyin);                                                     \
		}                                                                     \
	}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO((void))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 38 "src/vlog_file.l"

#line 759 "lib/opt/lex_n_yacc/vlog_file.yy.cpp"

	if (yy_init)
	{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!yy_start)
			yy_start = 1; /* first start state */

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (!yy_current_buffer)
			yy_current_buffer =
					yy_create_buffer(yyin, YY_BUF_SIZE);

		yy_load_buffer_state();
	}

	while (1) /* loops until end-of-file is reached */
	{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
	yy_match:
		do
		{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if (yy_accept[yy_current_state])
			{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
			}
			while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
			{
				yy_current_state = (int)yy_def[yy_current_state];
				if (yy_current_state >= 192)
					yy_c = yy_meta[(unsigned int)yy_c];
			}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
			++yy_cp;
		} while (yy_base[yy_current_state] != 462);

	yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if (yy_act == 0)
		{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
		}

		YY_DO_BEFORE_ACTION;

	do_action: /* This label is used only to access EOF actions. */

		switch (yy_act)
		{					/* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = yy_hold_char;
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;

			case 1:
				YY_RULE_SETUP
#line 41 "src/vlog_file.l"
						;
				YY_BREAK
			case 2:
				YY_RULE_SETUP
#line 42 "src/vlog_file.l"
				BEGIN COMMENT;
				YY_BREAK
			case 3:
				YY_RULE_SETUP
#line 43 "src/vlog_file.l"
				BEGIN INITIAL;
				YY_BREAK
			case 4:
				YY_RULE_SETUP
#line 44 "src/vlog_file.l"
				{
					vlog_fileline++;
				}
				YY_BREAK
			case 5:
				YY_RULE_SETUP
#line 45 "src/vlog_file.l"

				YY_BREAK
			case 6:
				YY_RULE_SETUP
#line 47 "src/vlog_file.l"
				BEGIN SPECIFY;
				YY_BREAK
			case 7:
				YY_RULE_SETUP
#line 48 "src/vlog_file.l"
				{
					vlog_fileskipSpecify();
					BEGIN(INITIAL);
				}
				YY_BREAK
			case 8:
				YY_RULE_SETUP
#line 50 "src/vlog_file.l"
				{
					vlog_fileline++;
				}
				YY_BREAK
			case 9:
				YY_RULE_SETUP
#line 51 "src/vlog_file.l"

				YY_BREAK
			case 10:
				YY_RULE_SETUP
#line 53 "src/vlog_file.l"
				BEGIN TABLE;
				YY_BREAK
			case 11:
				YY_RULE_SETUP
#line 54 "src/vlog_file.l"
				{
					vlog_fileskipTable();
					BEGIN(INITIAL);
				}
				YY_BREAK
			case 12:
				YY_RULE_SETUP
#line 56 "src/vlog_file.l"
				{
					vlog_fileline++;
				}
				YY_BREAK
			case 13:
				YY_RULE_SETUP
#line 57 "src/vlog_file.l"

				YY_BREAK
			case 14:
				YY_RULE_SETUP
#line 59 "src/vlog_file.l"
				{
					vlog_fileskipTimeScale();
				}
				YY_BREAK
			case 15:
				YY_RULE_SETUP
#line 60 "src/vlog_file.l"
				{
					vlog_fileskipCellDef();
				}
				YY_BREAK
			case 16:
				YY_RULE_SETUP
#line 61 "src/vlog_file.l"
				{
					vlog_fileskipEndCellDef();
				}
				YY_BREAK
			case 17:
				YY_RULE_SETUP
#line 63 "src/vlog_file.l"
				{
					return MODULE;
				}
				YY_BREAK
			case 18:
				YY_RULE_SETUP
#line 64 "src/vlog_file.l"
				{
					return ENDMODULE;
				}
				YY_BREAK
			case 19:
				YY_RULE_SETUP
#line 65 "src/vlog_file.l"
				{
					return PRIMITIVE;
				}
				YY_BREAK
			case 20:
				YY_RULE_SETUP
#line 66 "src/vlog_file.l"
				{
					return ENDPRIMITIVE;
				}
				YY_BREAK
			case 21:
				YY_RULE_SETUP
#line 67 "src/vlog_file.l"
				{
					return INPUT;
				}
				YY_BREAK
			case 22:
				YY_RULE_SETUP
#line 68 "src/vlog_file.l"
				{
					return OUTPUT;
				}
				YY_BREAK
			case 23:
				YY_RULE_SETUP
#line 69 "src/vlog_file.l"
				{
					return INOUT;
				}
				YY_BREAK
			case 24:
				YY_RULE_SETUP
#line 70 "src/vlog_file.l"
				{
					return ASSIGN;
				}
				YY_BREAK
			case 25:
				YY_RULE_SETUP
#line 71 "src/vlog_file.l"
				{
					return WIRE;
				}
				YY_BREAK
			case 26:
				YY_RULE_SETUP
#line 72 "src/vlog_file.l"
				{
					return REG;
				}
				YY_BREAK
			case 27:
				YY_RULE_SETUP
#line 73 "src/vlog_file.l"
				{
					return SUPPLY_L;
				}
				YY_BREAK
			case 28:
				YY_RULE_SETUP
#line 74 "src/vlog_file.l"
				{
					return SUPPLY_H;
				}
				YY_BREAK
			case 29:
				YY_RULE_SETUP
#line 76 "src/vlog_file.l"
				{
					strcpy(vlog_filelval.ychar, vlog_filetext);
					return STRENGTH;
				}
				YY_BREAK
			case 30:
				YY_RULE_SETUP
#line 81 "src/vlog_file.l"
				{
					strcpy(vlog_filelval.ychar, vlog_filetext);
					return NUMBER;
				}
				YY_BREAK
			case 31:
				YY_RULE_SETUP
#line 86 "src/vlog_file.l"
				{
					strcpy(vlog_filelval.ychar, vlog_filetext);
					return NAME;
				}
				YY_BREAK
			case 32:
				YY_RULE_SETUP
#line 91 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 33:
				YY_RULE_SETUP
#line 92 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 34:
				YY_RULE_SETUP
#line 93 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 35:
				YY_RULE_SETUP
#line 94 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 36:
				YY_RULE_SETUP
#line 95 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 37:
				YY_RULE_SETUP
#line 96 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 38:
				YY_RULE_SETUP
#line 97 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 39:
				YY_RULE_SETUP
#line 98 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 40:
				YY_RULE_SETUP
#line 99 "src/vlog_file.l"
				{
					return vlog_filetext[0];
				}
				YY_BREAK
			case 41:
				YY_RULE_SETUP
#line 101 "src/vlog_file.l"
				{
					vlog_fileline++;
				}
				YY_BREAK
			case 42:
				YY_RULE_SETUP
#line 102 "src/vlog_file.l"
						;
				YY_BREAK
			case 43:
				YY_RULE_SETUP
#line 103 "src/vlog_file.l"
						;
				YY_BREAK
			case 44:
				YY_RULE_SETUP
#line 105 "src/vlog_file.l"
				ECHO;
				YY_BREAK
#line 1073 "lib/opt/lex_n_yacc/vlog_file.yy.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(SPECIFY):
			case YY_STATE_EOF(TABLE):
				yyterminate();

			case YY_END_OF_BUFFER:
			{
				/* Amount of text matched not including the EOB char. */
				int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;

				/* Undo the effects of YY_DO_BEFORE_ACTION. */
				*yy_cp = yy_hold_char;
				YY_RESTORE_YY_MORE_OFFSET

				if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
				{
					/* We're scanning a new file or input source.  It's
					 * possible that this happened because the user
					 * just pointed yyin at a new source and called
					 * yylex().  If so, then we have to assure
					 * consistency between yy_current_buffer and our
					 * globals.  Here is the right place to do so, because
					 * this is the first action (other than possibly a
					 * back-up) that will match for the new input source.
					 */
					yy_n_chars = yy_current_buffer->yy_n_chars;
					yy_current_buffer->yy_input_file = yyin;
					yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
				}

				/* Note that here we test for yy_c_buf_p "<=" to the position
				 * of the first EOB in the buffer, since yy_c_buf_p will
				 * already have been incremented past the NUL character
				 * (since all states make transitions on EOB to the
				 * end-of-buffer state).  Contrast this with the test
				 * in input().
				 */
				if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
				{ /* This was really a NUL. */
					yy_state_type yy_next_state;

					yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

					yy_current_state = yy_get_previous_state();

					/* Okay, we're now positioned to make the NUL
					 * transition.  We couldn't have
					 * yy_get_previous_state() go ahead and do it
					 * for us because it doesn't know how to deal
					 * with the possibility of jamming (and we don't
					 * want to build jamming into it because then it
					 * will run more slowly).
					 */

					yy_next_state = yy_try_NUL_trans(yy_current_state);

					yy_bp = yytext_ptr + YY_MORE_ADJ;

					if (yy_next_state)
					{
						/* Consume the NUL. */
						yy_cp = ++yy_c_buf_p;
						yy_current_state = yy_next_state;
						goto yy_match;
					}

					else
					{
						yy_cp = yy_c_buf_p;
						goto yy_find_action;
					}
				}

				else
					switch (yy_get_next_buffer())
					{
						case EOB_ACT_END_OF_FILE:
						{
							yy_did_buffer_switch_on_eof = 0;

							if (yywrap())
							{
								/* Note: because we've taken care in
								 * yy_get_next_buffer() to have set up
								 * yytext, we can now set up
								 * yy_c_buf_p so that if some total
								 * hoser (like flex itself) wants to
								 * call the scanner after we return the
								 * YY_NULL, it'll still work - another
								 * YY_NULL will get returned.
								 */
								yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

								yy_act = YY_STATE_EOF(YY_START);
								goto do_action;
							}

							else
							{
								if (!yy_did_buffer_switch_on_eof)
									YY_NEW_FILE;
							}
							break;
						}

						case EOB_ACT_CONTINUE_SCAN:
							yy_c_buf_p =
									yytext_ptr + yy_amount_of_matched_text;

							yy_current_state = yy_get_previous_state();

							yy_cp = yy_c_buf_p;
							yy_bp = yytext_ptr + YY_MORE_ADJ;
							goto yy_match;

						case EOB_ACT_LAST_MATCH:
							yy_c_buf_p =
									&yy_current_buffer->yy_ch_buf[yy_n_chars];

							yy_current_state = yy_get_previous_state();

							yy_cp = yy_c_buf_p;
							yy_bp = yytext_ptr + YY_MORE_ADJ;
							goto yy_find_action;
					}
				break;
			}

			default:
				YY_FATAL_ERROR(
						"fatal flex scanner internal error--no action found");
		} /* end of action switch */
	}		/* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
		YY_FATAL_ERROR(
				"fatal flex scanner internal error--end of buffer missed");

	if (yy_current_buffer->yy_fill_buffer == 0)
	{ /* Don't try to fill the buffer, so this is an EOF. */
		if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
		{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

	for (i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
	{
		int num_to_read =
				yy_current_buffer->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
					"input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
					(int)(yy_c_buf_p - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size * 2;

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
						/* Include room in for 2 EOB chars. */
						yy_flex_realloc((void *)b->yy_ch_buf,
														b->yy_buf_size + 2);
			}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
						"fatal error - scanner input buffer overflow");

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
										number_to_move - 1;
#endif
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
						 yy_n_chars, num_to_read);

		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	if (yy_n_chars == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
					YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
	{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if (yy_accept[yy_current_state])
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
		while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
			yy_current_state = (int)yy_def[yy_current_state];
			if (yy_current_state >= 192)
				yy_c = yy_meta[(unsigned int)yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if (yy_accept[yy_current_state])
	{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
	}
	while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
	{
		yy_current_state = (int)yy_def[yy_current_state];
		if (yy_current_state >= 192)
			yy_c = yy_meta[(unsigned int)yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	yy_is_jam = (yy_current_state == 191);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput(int c, register char *yy_bp)
#else
static void yyunput(c, yy_bp) int c;
register char *yy_bp;
#endif
{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
	{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while (source > yy_current_buffer->yy_ch_buf)
			*--dest = *--source;

		yy_cp += (int)(dest - source);
		yy_bp += (int)(dest - source);
		yy_current_buffer->yy_n_chars =
				yy_n_chars = yy_current_buffer->yy_buf_size;

		if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
			YY_FATAL_ERROR("flex scanner push-back overflow");
	}

	*--yy_cp = (char)c;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
}
#endif /* ifndef YY_NO_UNPUT */

#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
		{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch (yy_get_next_buffer())
			{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin);

					/* fall through */

				case EOB_ACT_END_OF_FILE:
				{
					if (yywrap())
						return EOF;

					if (!yy_did_buffer_switch_on_eof)
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
				}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
			}
		}
	}

	c = *(unsigned char *)yy_c_buf_p; /* cast for 8-bit char's */
	*yy_c_buf_p = '\0';								/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
}

#ifdef YY_USE_PROTOS
void yyrestart(FILE *input_file)
#else
void yyrestart(input_file)
		FILE *input_file;
#endif
{
	if (!yy_current_buffer)
		yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

	yy_init_buffer(yy_current_buffer, input_file);
	yy_load_buffer_state();
}

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
		YY_BUFFER_STATE new_buffer;
#endif
{
	if (yy_current_buffer == new_buffer)
		return;

	if (yy_current_buffer)
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
}

#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
}

#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size)
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE *file;
int size;
#endif
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *)yy_flex_alloc(b->yy_buf_size + 2);
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b, file);

	return b;
}

#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
		YY_BUFFER_STATE b;
#endif
{
	if (!b)
		return;

	if (b == yy_current_buffer)
		yy_current_buffer = (YY_BUFFER_STATE)0;

	if (b->yy_is_our_buffer)
		yy_flex_free((void *)b->yy_ch_buf);

	yy_flex_free((void *)b);
}

#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO((int));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE *file)
#else
void yy_init_buffer(b, file)
		YY_BUFFER_STATE b;
FILE *file;
#endif

{
	yy_flush_buffer(b);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;
#endif
#endif
}

#ifdef YY_USE_PROTOS
void yy_flush_buffer(YY_BUFFER_STATE b)
#else
void yy_flush_buffer(b)
		YY_BUFFER_STATE b;
#endif

{
	if (!b)
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == yy_current_buffer)
		yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size)
#else
YY_BUFFER_STATE yy_scan_buffer(base, size)
char *base;
yy_size_t size;
#endif
{
	YY_BUFFER_STATE b;

	if (size < 2 ||
			base[size - 2] != YY_END_OF_BUFFER_CHAR ||
			base[size - 1] != YY_END_OF_BUFFER_CHAR)
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

	b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b);

	return b;
}
#endif

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string(yyconst char *yy_str)
#else
YY_BUFFER_STATE yy_scan_string(yy_str)
yyconst char *yy_str;
#endif
{
	int len;
	for (len = 0; yy_str[len]; ++len)
		;

	return yy_scan_bytes(yy_str, len);
}
#endif

#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes(yyconst char *bytes, int len)
#else
YY_BUFFER_STATE yy_scan_bytes(bytes, len)
yyconst char *bytes;
int len;
#endif
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *)yy_flex_alloc(n);
	if (!buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

	for (i = 0; i < len; ++i)
		buf[i] = bytes[i];

	buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf, n);
	if (!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
#endif

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state) int new_state;
#endif
{
	if (yy_start_stack_ptr >= yy_start_stack_depth)
	{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof(int);

		if (!yy_start_stack)
			yy_start_stack = (int *)yy_flex_alloc(new_size);

		else
			yy_start_stack = (int *)yy_flex_realloc(
					(void *)yy_start_stack, new_size);

		if (!yy_start_stack)
			YY_FATAL_ERROR(
					"out of memory expanding start-condition stack");
	}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}
#endif

#ifndef YY_NO_POP_STATE
static void yy_pop_state()
{
	if (--yy_start_stack_ptr < 0)
		YY_FATAL_ERROR("start-condition stack underflow");

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif

#ifndef YY_NO_TOP_STATE
static int yy_top_state()
{
	return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error(yyconst char msg[])
#else
static void yy_fatal_error(msg) char msg[];
#endif
{
	(void)fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                            \
	do                                         \
	{                                          \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char;           \
		yy_c_buf_p = yytext + n;                 \
		yy_hold_char = *yy_c_buf_p;              \
		*yy_c_buf_p = '\0';                      \
		yyleng = n;                              \
	} while (0)

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n) char *s1;
yyconst char *s2;
int n;
#endif
{
	register int i;
	for (i = 0; i < n; ++i)
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char *s)
#else
static int yy_flex_strlen(s)
yyconst char *s;
#endif
{
	register int n;
	for (n = 0; s[n]; ++n)
		;

	return n;
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc(yy_size_t size)
#else
static void *yy_flex_alloc(size)
yy_size_t size;
#endif
{
	return (void *)malloc(size);
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc(void *ptr, yy_size_t size)
#else
static void *yy_flex_realloc(ptr, size) void *ptr;
yy_size_t size;
#endif
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *)realloc((char *)ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void *ptr)
#else
static void yy_flex_free(ptr) void *ptr;
#endif
{
	free(ptr);
}

#if YY_MAIN
int main()
{
	yylex();
	return 0;
}
#endif
#line 105 "src/vlog_file.l"

void vlog_fileskipSpecify()
{
}

void vlog_fileskipTable() {}

void vlog_fileskipTimeScale() {}

void vlog_fileskipCellDef() {}

void vlog_fileskipEndCellDef() {}
