#define yy_create_buffer mdt_file_create_buffer
#define yy_delete_buffer mdt_file_delete_buffer
#define yy_scan_buffer mdt_file_scan_buffer
#define yy_scan_string mdt_file_scan_string
#define yy_scan_bytes mdt_file_scan_bytes
#define yy_flex_debug mdt_file_flex_debug
#define yy_init_buffer mdt_file_init_buffer
#define yy_flush_buffer mdt_file_flush_buffer
#define yy_load_buffer_state mdt_file_load_buffer_state
#define yy_switch_to_buffer mdt_file_switch_to_buffer
#define yyin mdt_filein
#define yyleng mdt_fileleng
#define yylex mdt_filelex
#define yyout mdt_fileout
#define yyrestart mdt_filerestart
#define yytext mdt_filetext

#line 19 "lib/opt/lex_n_yacc/mdt_file.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn - rch
#pragma warn - use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO( proto ) proto
#else
#define YY_PROTO( proto ) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI( c ) ( (unsigned int)(unsigned char)c )

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ( ( yy_start - 1 ) / 2 )
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF( state ) ( YY_END_OF_BUFFER + state + 1 )

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless( n )                                \
	do                                               \
	{                                                \
		/* Undo effects of setting up yytext. */       \
		*yy_cp = yy_hold_char;                         \
		YY_RESTORE_YY_MORE_OFFSET                      \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ;  \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
	} while ( 0 )

#define unput( c ) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
{
	FILE *yy_input_file;

	char *yy_ch_buf;	/* input buffer */
	char *yy_buf_pos; /* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars; /* number of characters read into yy_ch_buf */

int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *)0;
static int yy_init = 1;	 /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO( ( FILE * input_file ) );

void yy_switch_to_buffer YY_PROTO( ( YY_BUFFER_STATE new_buffer ) );
void yy_load_buffer_state YY_PROTO( (void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO( ( FILE * file, int size ) );
void yy_delete_buffer YY_PROTO( ( YY_BUFFER_STATE b ) );
void yy_init_buffer YY_PROTO( ( YY_BUFFER_STATE b, FILE *file ) );
void yy_flush_buffer YY_PROTO( ( YY_BUFFER_STATE b ) );
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO( ( char *base, yy_size_t size ) );
YY_BUFFER_STATE yy_scan_string YY_PROTO( ( yyconst char *yy_str ) );
YY_BUFFER_STATE yy_scan_bytes YY_PROTO( ( yyconst char *bytes, int len ) );

static void *yy_flex_alloc YY_PROTO( ( yy_size_t ) );
static void *yy_flex_realloc YY_PROTO( ( void *, yy_size_t ) );
static void yy_flex_free YY_PROTO( (void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive( is_interactive )                     \
	{                                                              \
		if ( !yy_current_buffer )                                    \
			yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
		yy_current_buffer->yy_is_interactive = is_interactive;       \
	}

#define yy_set_bol( at_bol )                                     \
	{                                                              \
		if ( !yy_current_buffer )                                    \
			yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
		yy_current_buffer->yy_at_bol = at_bol;                       \
	}

#define YY_AT_BOL() ( yy_current_buffer->yy_at_bol )

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *)0, *yyout = (FILE *)0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO( (void));
static yy_state_type yy_try_NUL_trans YY_PROTO( ( yy_state_type current_state ) );
static int yy_get_next_buffer YY_PROTO( (void));
static void yy_fatal_error YY_PROTO( ( yyconst char msg[] ) );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION        \
	yytext_ptr = yy_bp;              \
	yyleng = (int)( yy_cp - yy_bp ); \
	yy_hold_char = *yy_cp;           \
	*yy_cp = '\0';                   \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
static yyconst short int yy_accept[ 550 ] =
		{ 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 145, 143, 142, 141, 143, 136,
			137, 139, 143, 140, 138, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 6, 5, 4, 3, 10, 9, 8, 14, 13,

			12, 18, 17, 16, 22, 21, 20, 26, 25, 24,
			30, 29, 28, 34, 33, 32, 38, 37, 36, 42,
			41, 40, 46, 45, 44, 50, 49, 48, 54, 53,
			52, 70, 69, 68, 74, 73, 72, 58, 57, 56,
			62, 61, 60, 66, 65, 64, 78, 77, 76, 82,
			81, 80, 86, 85, 84, 90, 89, 88, 94, 93,
			92, 98, 97, 96, 102, 101, 100, 106, 105, 104,
			110, 109, 108, 114, 113, 112, 119, 118, 117, 116,
			122, 121, 125, 124, 0, 1, 135, 0, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,

			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 0, 1, 0, 135, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 135, 135, 0, 134, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 0, 134, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 130, 128, 135,
			135, 135, 135, 135, 126, 135, 135, 135, 135, 135,

			135, 135, 135, 0, 11, 135, 0, 135, 120, 0,
			47, 135, 135, 135, 0, 15, 135, 135, 0, 27,
			135, 135, 135, 131, 115, 135, 135, 135, 135, 129,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 0,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 135, 0, 135, 135, 135, 135, 135, 135, 135,
			135, 133, 135, 135, 135, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 123, 135, 135, 135, 135,
			135, 135, 135, 0, 23, 135, 135, 135, 135, 0,

			19, 135, 132, 0, 83, 135, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 0, 7, 0, 67, 135,
			0, 87, 135, 135, 135, 0, 111, 0, 0, 135,
			135, 135, 135, 135, 135, 135, 135, 135, 0, 39,
			135, 135, 135, 135, 0, 0, 135, 135, 135, 135,
			135, 135, 135, 135, 135, 135, 0, 79, 0, 75,
			127, 0, 0, 0, 135, 135, 135, 135, 135, 135,
			0, 71, 0, 95, 135, 0, 91, 0, 0, 0,
			0, 135, 135, 135, 135, 135, 135, 135, 0, 0,
			59, 55, 135, 135, 135, 135, 135, 135, 135, 63,

			0, 135, 135, 135, 135, 135, 135, 0, 43, 0,
			135, 135, 135, 0, 2, 135, 135, 0, 135, 135,
			135, 135, 0, 107, 0, 135, 135, 135, 135, 0,
			0, 99, 135, 135, 0, 31, 0, 0, 103, 135,
			0, 0, 35, 0, 0, 0, 0, 51, 0 };

static yyconst int yy_ec[ 256 ] =
		{ 0,
			1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
			2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 2, 1, 1, 4, 1, 1, 1, 1, 5,
			6, 1, 1, 7, 1, 1, 8, 9, 10, 11,
			11, 11, 11, 11, 11, 11, 11, 12, 13, 1,
			14, 1, 1, 1, 15, 15, 15, 15, 15, 15,
			15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
			15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
			1, 1, 1, 1, 16, 1, 17, 18, 19, 20,

			21, 22, 23, 15, 24, 15, 25, 26, 27, 28,
			29, 30, 15, 31, 32, 33, 34, 35, 36, 37,
			38, 39, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1 };

static yyconst int yy_meta[ 40 ] =
		{ 0,
			1, 1, 2, 1, 1, 1, 1, 1, 3, 3,
			3, 3, 1, 1, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3 };

static yyconst short int yy_base[ 583 ] =
		{ 0,
			0, 0, 37, 41, 38, 42, 45, 46, 47, 49,
			50, 51, 53, 54, 58, 62, 65, 66, 67, 69,
			70, 71, 73, 74, 78, 82, 85, 86, 87, 89,
			90, 91, 93, 94, 98, 102, 105, 106, 107, 109,
			110, 111, 113, 114, 118, 122, 125, 126, 127, 129,
			130, 131, 133, 134, 138, 142, 145, 146, 147, 151,
			1014, 1013, 1012, 1011, 1013, 1018, 1018, 1018, 988, 1018,
			1018, 1018, 1003, 1018, 1018, 998, 148, 149, 150, 152,
			153, 155, 154, 163, 165, 151, 166, 169, 172, 176,
			183, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
			1018, 1018, 1018, 1018, 981, 0, 996, 979, 184, 186,
			187, 188, 189, 190, 191, 193, 194, 195, 217, 214,

			197, 201, 215, 199, 218, 210, 223, 200, 224, 231,
			230, 987, 0, 983, 225, 236, 246, 248, 233, 249,
			250, 253, 254, 257, 258, 259, 260, 263, 261, 266,
			265, 267, 274, 276, 272, 273, 278, 280, 287, 275,
			294, 289, 295, 978, 302, 301, 302, 277, 304, 305,
			306, 307, 308, 313, 314, 320, 315, 318, 321, 323,
			327, 325, 328, 329, 332, 331, 338, 340, 341, 346,
			347, 348, 359, 354, 969, 1018, 356, 374, 378, 357,
			358, 381, 370, 373, 395, 375, 388, 990, 988, 377,
			384, 401, 396, 399, 402, 389, 403, 408, 405, 412,

			409, 410, 414, 430, 1018, 415, 884, 417, 1018, 432,
			1018, 425, 430, 416, 450, 1018, 435, 438, 453, 1018,
			445, 446, 449, 891, 1018, 451, 453, 448, 450, 889,
			454, 460, 463, 465, 467, 469, 470, 471, 475, 877,
			477, 478, 480, 483, 484, 485, 489, 490, 491, 493,
			494, 492, 495, 496, 499, 508, 502, 503, 506, 514,
			519, 510, 538, 521, 523, 525, 530, 531, 532, 545,
			544, 885, 546, 548, 538, 559, 554, 556, 576, 562,
			551, 552, 568, 558, 573, 1018, 574, 564, 575, 577,
			591, 604, 588, 607, 1018, 610, 583, 585, 592, 617,

			1018, 623, 626, 630, 1018, 618, 615, 627, 629, 631,
			630, 633, 584, 637, 648, 651, 1018, 653, 1018, 640,
			656, 1018, 636, 654, 657, 671, 1018, 675, 677, 663,
			671, 659, 676, 678, 680, 682, 683, 684, 696, 1018,
			690, 703, 710, 695, 716, 695, 699, 708, 717, 697,
			711, 719, 732, 736, 724, 739, 752, 1018, 756, 1018,
			884, 864, 855, 720, 733, 731, 744, 740, 750, 753,
			765, 1018, 769, 1018, 761, 773, 1018, 868, 856, 851,
			846, 669, 757, 762, 765, 768, 769, 772, 842, 833,
			1018, 1018, 776, 777, 780, 783, 784, 785, 803, 1018,

			842, 788, 792, 797, 818, 789, 804, 822, 1018, 845,
			810, 814, 815, 832, 1018, 821, 840, 835, 795, 827,
			832, 833, 845, 1018, 832, 848, 837, 845, 865, 803,
			869, 1018, 872, 843, 878, 1018, 777, 885, 1018, 888,
			560, 891, 1018, 528, 339, 215, 207, 1018, 1018, 905,
			908, 911, 914, 917, 920, 923, 926, 929, 932, 935,
			938, 941, 944, 947, 950, 953, 956, 959, 962, 965,
			968, 971, 974, 977, 980, 983, 986, 989, 992, 995,
			167, 998 };

static yyconst short int yy_def[ 583 ] =
		{ 0,
			549, 1, 550, 550, 551, 551, 552, 552, 553, 553,
			554, 554, 555, 555, 556, 556, 557, 557, 558, 558,
			559, 559, 560, 560, 561, 561, 562, 562, 563, 563,
			564, 564, 565, 565, 566, 566, 567, 567, 568, 568,
			569, 569, 570, 570, 571, 571, 572, 572, 573, 573,
			574, 574, 575, 575, 576, 576, 577, 577, 578, 578,
			579, 579, 580, 580, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 549, 549, 549, 549, 549, 549, 549, 549, 549,

			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 582, 581, 549, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,

			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 549, 582, 549, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 549, 549, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 549, 549, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,

			581, 581, 581, 549, 549, 581, 549, 581, 549, 549,
			549, 581, 581, 581, 549, 549, 581, 581, 549, 549,
			581, 581, 581, 581, 549, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 549,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 549, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 549, 581, 581, 581, 581,
			581, 581, 581, 549, 549, 581, 581, 581, 581, 549,

			549, 581, 581, 549, 549, 581, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 549, 549, 549, 549, 581,
			549, 549, 581, 581, 581, 549, 549, 549, 549, 581,
			581, 581, 581, 581, 581, 581, 581, 581, 549, 549,
			581, 581, 581, 581, 549, 549, 581, 581, 581, 581,
			581, 581, 581, 581, 581, 581, 549, 549, 549, 549,
			581, 549, 549, 549, 581, 581, 581, 581, 581, 581,
			549, 549, 549, 549, 581, 549, 549, 549, 549, 549,
			549, 581, 581, 581, 581, 581, 581, 581, 549, 549,
			549, 549, 581, 581, 581, 581, 581, 581, 581, 549,

			549, 581, 581, 581, 581, 581, 581, 549, 549, 549,
			581, 581, 581, 549, 549, 581, 581, 549, 581, 581,
			581, 581, 549, 549, 549, 581, 581, 581, 581, 549,
			549, 549, 581, 581, 549, 549, 549, 549, 549, 581,
			549, 549, 549, 549, 549, 549, 549, 549, 0, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549 };

static yyconst short int yy_nxt[ 1058 ] =
		{ 0,
			66, 67, 68, 69, 70, 71, 72, 73, 66, 66,
			66, 66, 74, 75, 76, 76, 77, 78, 79, 80,
			81, 82, 76, 83, 76, 76, 84, 85, 86, 87,
			88, 89, 76, 90, 76, 91, 76, 76, 76, 93,
			97, 94, 95, 93, 97, 94, 95, 100, 100, 103,
			98, 103, 106, 106, 98, 109, 109, 101, 101, 104,
			112, 104, 107, 107, 112, 110, 110, 115, 115, 118,
			113, 118, 121, 121, 113, 124, 124, 116, 116, 119,
			127, 119, 122, 122, 127, 125, 125, 130, 130, 133,
			128, 133, 136, 136, 128, 139, 139, 131, 131, 134,

			142, 134, 137, 137, 142, 140, 140, 145, 145, 148,
			143, 148, 151, 151, 143, 154, 154, 146, 146, 149,
			157, 149, 152, 152, 157, 155, 155, 160, 160, 163,
			158, 163, 166, 166, 158, 169, 169, 161, 161, 164,
			172, 164, 167, 167, 172, 170, 170, 175, 175, 178,
			173, 179, 180, 178, 173, 179, 180, 176, 176, 188,
			188, 188, 188, 188, 188, 188, 188, 189, 195, 187,
			193, 197, 196, 190, 188, 194, 188, 188, 191, 200,
			188, 199, 192, 188, 204, 205, 201, 188, 198, 207,
			208, 202, 209, 203, 188, 188, 206, 188, 188, 188,

			188, 188, 188, 215, 188, 188, 188, 210, 188, 216,
			188, 188, 188, 211, 219, 222, 240, 217, 220, 218,
			233, 188, 224, 221, 232, 188, 188, 223, 188, 188,
			234, 235, 230, 237, 188, 188, 188, 548, 236, 238,
			225, 188, 188, 547, 188, 226, 227, 188, 228, 229,
			231, 242, 247, 243, 239, 246, 241, 188, 250, 188,
			188, 188, 248, 249, 188, 188, 252, 251, 188, 188,
			188, 188, 188, 253, 188, 255, 188, 188, 188, 254,
			262, 260, 263, 188, 188, 188, 188, 188, 188, 188,
			256, 188, 257, 258, 264, 259, 261, 265, 188, 269,

			188, 266, 271, 267, 268, 188, 188, 270, 273, 272,
			276, 276, 188, 188, 279, 188, 188, 188, 188, 188,
			281, 277, 283, 284, 188, 188, 188, 274, 280, 188,
			282, 188, 188, 278, 188, 287, 188, 290, 188, 188,
			188, 293, 188, 188, 294, 285, 286, 288, 296, 188,
			289, 188, 188, 291, 295, 292, 300, 188, 188, 188,
			304, 304, 302, 299, 297, 188, 303, 188, 188, 188,
			188, 546, 305, 298, 306, 309, 309, 313, 301, 310,
			310, 188, 315, 315, 188, 188, 188, 308, 188, 188,
			314, 311, 188, 312, 316, 188, 319, 319, 321, 188,

			188, 317, 325, 325, 323, 318, 188, 188, 320, 322,
			188, 324, 188, 188, 188, 326, 188, 328, 327, 188,
			188, 188, 329, 188, 336, 188, 188, 188, 188, 337,
			339, 304, 304, 310, 310, 330, 188, 332, 331, 338,
			333, 188, 334, 305, 342, 311, 188, 335, 341, 188,
			343, 315, 315, 344, 319, 319, 188, 188, 345, 188,
			188, 188, 188, 316, 188, 188, 320, 349, 346, 348,
			350, 188, 351, 347, 188, 353, 188, 354, 188, 352,
			188, 188, 188, 355, 356, 357, 188, 359, 188, 188,
			360, 188, 364, 362, 188, 188, 188, 358, 365, 361,

			188, 188, 188, 188, 188, 188, 188, 188, 369, 366,
			188, 372, 367, 188, 188, 371, 370, 188, 380, 188,
			375, 188, 368, 373, 374, 188, 381, 376, 377, 379,
			188, 382, 188, 378, 188, 383, 188, 384, 385, 386,
			386, 188, 188, 188, 545, 390, 394, 394, 389, 188,
			391, 392, 387, 388, 393, 188, 188, 188, 395, 188,
			400, 400, 188, 188, 396, 188, 397, 188, 398, 188,
			188, 399, 401, 188, 402, 188, 403, 404, 404, 188,
			408, 406, 410, 407, 188, 188, 188, 188, 188, 405,
			544, 409, 416, 416, 188, 188, 188, 412, 414, 188,

			411, 413, 188, 188, 417, 418, 418, 415, 394, 394,
			420, 421, 421, 437, 423, 188, 424, 419, 400, 400,
			395, 188, 425, 422, 426, 426, 188, 428, 428, 188,
			401, 404, 404, 430, 188, 431, 427, 188, 188, 429,
			188, 188, 188, 405, 188, 432, 434, 188, 188, 439,
			439, 188, 416, 416, 418, 418, 433, 421, 421, 188,
			441, 440, 435, 438, 417, 188, 419, 442, 188, 422,
			188, 436, 426, 426, 188, 444, 428, 428, 445, 445,
			188, 447, 188, 449, 427, 443, 448, 188, 429, 188,
			493, 188, 446, 188, 188, 188, 451, 439, 439, 450,

			452, 188, 453, 454, 457, 457, 188, 455, 188, 440,
			188, 459, 459, 462, 188, 461, 458, 445, 445, 188,
			456, 188, 188, 460, 463, 464, 466, 465, 188, 468,
			188, 446, 467, 471, 471, 188, 480, 473, 473, 469,
			476, 476, 188, 188, 188, 472, 470, 188, 481, 474,
			188, 188, 477, 457, 457, 188, 475, 459, 459, 483,
			482, 188, 484, 485, 188, 458, 471, 471, 188, 460,
			473, 473, 188, 188, 476, 476, 188, 486, 472, 188,
			188, 488, 474, 188, 494, 487, 477, 188, 188, 497,
			495, 188, 498, 496, 188, 188, 188, 541, 503, 188,

			188, 502, 499, 188, 508, 508, 188, 504, 188, 506,
			505, 511, 516, 507, 188, 188, 509, 512, 513, 514,
			514, 188, 515, 508, 508, 188, 188, 526, 519, 188,
			537, 517, 188, 514, 514, 509, 515, 520, 188, 522,
			521, 523, 523, 188, 188, 527, 523, 523, 188, 531,
			531, 188, 530, 524, 188, 528, 188, 525, 524, 188,
			518, 532, 510, 534, 501, 529, 535, 535, 500, 533,
			531, 531, 492, 538, 538, 540, 188, 491, 536, 535,
			535, 490, 532, 188, 489, 539, 538, 538, 479, 542,
			542, 536, 542, 542, 478, 188, 188, 363, 539, 188,

			188, 543, 188, 340, 543, 92, 92, 92, 96, 96,
			96, 99, 99, 99, 102, 102, 102, 105, 105, 105,
			108, 108, 108, 111, 111, 111, 114, 114, 114, 117,
			117, 117, 120, 120, 120, 123, 123, 123, 126, 126,
			126, 129, 129, 129, 132, 132, 132, 135, 135, 135,
			138, 138, 138, 141, 141, 141, 144, 144, 144, 147,
			147, 147, 150, 150, 150, 153, 153, 153, 156, 156,
			156, 159, 159, 159, 162, 162, 162, 165, 165, 165,
			168, 168, 168, 171, 171, 171, 174, 174, 174, 177,
			177, 177, 181, 181, 181, 183, 183, 183, 213, 188,

			213, 188, 307, 275, 245, 244, 214, 188, 212, 188,
			186, 185, 549, 184, 184, 182, 182, 65, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549 };

static yyconst short int yy_chk[ 1058 ] =
		{ 0,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
			5, 3, 3, 4, 6, 4, 4, 7, 8, 9,
			5, 10, 11, 12, 6, 13, 14, 7, 8, 9,
			15, 10, 11, 12, 16, 13, 14, 17, 18, 19,
			15, 20, 21, 22, 16, 23, 24, 17, 18, 19,
			25, 20, 21, 22, 26, 23, 24, 27, 28, 29,
			25, 30, 31, 32, 26, 33, 34, 27, 28, 29,

			35, 30, 31, 32, 36, 33, 34, 37, 38, 39,
			35, 40, 41, 42, 36, 43, 44, 37, 38, 39,
			45, 40, 41, 42, 46, 43, 44, 47, 48, 49,
			45, 50, 51, 52, 46, 53, 54, 47, 48, 49,
			55, 50, 51, 52, 56, 53, 54, 57, 58, 59,
			55, 59, 59, 60, 56, 60, 60, 57, 58, 77,
			78, 79, 86, 80, 81, 83, 82, 77, 80, 581,
			79, 82, 81, 77, 84, 79, 85, 87, 77, 84,
			88, 83, 78, 89, 86, 86, 84, 90, 82, 88,
			89, 84, 89, 85, 91, 189, 87, 190, 191, 192,

			193, 194, 195, 189, 196, 197, 198, 90, 201, 190,
			204, 208, 202, 91, 193, 196, 208, 191, 194, 192,
			202, 206, 198, 195, 201, 200, 203, 197, 199, 205,
			203, 204, 200, 206, 207, 209, 215, 547, 205, 207,
			199, 211, 210, 546, 219, 199, 199, 216, 199, 199,
			200, 210, 216, 211, 207, 215, 209, 217, 219, 218,
			220, 221, 217, 218, 222, 223, 221, 220, 224, 225,
			226, 227, 229, 222, 228, 224, 231, 230, 232, 223,
			231, 229, 232, 235, 236, 233, 240, 234, 248, 237,
			225, 238, 226, 227, 233, 228, 230, 234, 239, 238,

			242, 235, 240, 236, 237, 241, 243, 239, 242, 241,
			245, 245, 246, 247, 248, 249, 250, 251, 252, 253,
			250, 246, 252, 253, 254, 255, 257, 243, 249, 258,
			251, 256, 259, 247, 260, 256, 262, 259, 261, 263,
			264, 262, 266, 265, 263, 254, 255, 257, 265, 267,
			258, 268, 269, 260, 264, 261, 269, 270, 271, 272,
			273, 273, 271, 268, 266, 274, 272, 277, 280, 281,
			273, 545, 273, 267, 274, 278, 278, 280, 270, 279,
			279, 283, 282, 282, 284, 278, 286, 277, 290, 279,
			281, 279, 282, 279, 282, 291, 285, 285, 286, 287,

			296, 283, 292, 292, 290, 284, 285, 293, 285, 287,
			294, 291, 292, 295, 297, 293, 299, 295, 294, 298,
			301, 302, 296, 300, 301, 303, 306, 314, 308, 302,
			306, 304, 304, 310, 310, 297, 312, 299, 298, 303,
			300, 313, 300, 304, 312, 310, 317, 300, 308, 318,
			313, 315, 315, 314, 319, 319, 321, 322, 317, 328,
			323, 329, 326, 315, 327, 331, 319, 323, 318, 322,
			326, 332, 327, 321, 333, 329, 334, 331, 335, 328,
			336, 337, 338, 332, 333, 334, 339, 336, 341, 342,
			337, 343, 341, 339, 344, 345, 346, 335, 342, 338,

			347, 348, 349, 352, 350, 351, 353, 354, 346, 343,
			355, 349, 344, 357, 358, 348, 347, 359, 357, 356,
			352, 362, 345, 350, 351, 360, 358, 353, 354, 356,
			361, 359, 364, 355, 365, 360, 366, 361, 362, 363,
			363, 367, 368, 369, 544, 366, 370, 370, 365, 375,
			367, 368, 364, 364, 369, 371, 370, 373, 370, 374,
			376, 376, 381, 382, 371, 377, 373, 378, 374, 384,
			376, 375, 376, 380, 377, 388, 378, 379, 379, 383,
			382, 380, 384, 381, 385, 387, 389, 379, 390, 379,
			541, 383, 391, 391, 397, 413, 398, 387, 389, 393,

			385, 388, 391, 399, 391, 392, 392, 390, 394, 394,
			393, 396, 396, 413, 397, 392, 398, 392, 400, 400,
			394, 396, 399, 396, 402, 402, 407, 403, 403, 406,
			400, 404, 404, 406, 402, 407, 402, 403, 408, 403,
			409, 411, 410, 404, 412, 408, 410, 423, 414, 415,
			415, 420, 416, 416, 418, 418, 409, 421, 421, 415,
			420, 415, 411, 414, 416, 424, 418, 423, 425, 421,
			432, 412, 426, 426, 430, 425, 428, 428, 429, 429,
			482, 430, 431, 432, 426, 424, 431, 433, 428, 434,
			482, 435, 429, 436, 437, 438, 434, 439, 439, 433,

			435, 441, 436, 437, 442, 442, 444, 438, 450, 439,
			447, 443, 443, 446, 442, 444, 442, 445, 445, 448,
			441, 443, 451, 443, 446, 446, 448, 447, 449, 450,
			452, 445, 449, 453, 453, 455, 464, 454, 454, 451,
			456, 456, 466, 453, 465, 453, 452, 454, 464, 454,
			456, 468, 456, 457, 457, 467, 455, 459, 459, 466,
			465, 469, 467, 468, 470, 457, 471, 471, 483, 459,
			473, 473, 475, 484, 476, 476, 485, 469, 471, 486,
			487, 475, 473, 488, 483, 470, 476, 493, 494, 486,
			484, 495, 487, 485, 496, 497, 498, 537, 494, 502,

			506, 493, 488, 503, 499, 499, 519, 495, 504, 497,
			496, 502, 506, 498, 499, 507, 499, 503, 504, 505,
			505, 511, 505, 508, 508, 512, 513, 519, 511, 505,
			530, 507, 516, 514, 514, 508, 514, 512, 520, 516,
			513, 517, 517, 521, 522, 520, 523, 523, 527, 526,
			526, 517, 525, 517, 534, 521, 528, 518, 523, 526,
			510, 526, 501, 528, 490, 522, 529, 529, 489, 527,
			531, 531, 481, 533, 533, 534, 529, 480, 529, 535,
			535, 479, 531, 533, 478, 533, 538, 538, 463, 540,
			540, 535, 542, 542, 462, 461, 372, 340, 538, 540,

			330, 540, 324, 307, 542, 550, 550, 550, 551, 551,
			551, 552, 552, 552, 553, 553, 553, 554, 554, 554,
			555, 555, 555, 556, 556, 556, 557, 557, 557, 558,
			558, 558, 559, 559, 559, 560, 560, 560, 561, 561,
			561, 562, 562, 562, 563, 563, 563, 564, 564, 564,
			565, 565, 565, 566, 566, 566, 567, 567, 567, 568,
			568, 568, 569, 569, 569, 570, 570, 570, 571, 571,
			571, 572, 572, 572, 573, 573, 573, 574, 574, 574,
			575, 575, 575, 576, 576, 576, 577, 577, 577, 578,
			578, 578, 579, 579, 579, 580, 580, 580, 582, 289,

			582, 288, 275, 244, 214, 212, 188, 187, 185, 76,
			73, 69, 65, 64, 63, 62, 61, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
			549, 549, 549, 549, 549, 549, 549 };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/mdt_file.l"
#define INITIAL 0
#line 2 "src/mdt_file.l"
// **************************************************************************
// File       [ mdt_file.l ]
// Author     [ littleshamoo ]
// Synopsis   [ lex for reading mentor mdt library file ]
// Date       [ 2011/02/23 created ]
// **************************************************************************

#include "mdt_file.h"
#include "mdt_file.tab.hpp"

using namespace std;

int mdt_fileline = 1;
bool mdt_filewarning = 1;
int mdt_fileparen = 0;

// skip scan definition
void mdt_fileskipScanDef();

// skip attributes
void mdt_fileskipCellType();
void mdt_fileskipUsed();
void mdt_fileskipClock();
void mdt_fileskipNoFault();
void mdt_fileskipFunction();
void mdt_fileskipFault();
void mdt_fileskipSetClk();
void mdt_fileskipResetClk();
void mdt_fileskipBusKeeper();
void mdt_fileskipArrayDel();
void mdt_fileskipArray();
void mdt_fileskipPulse();
void mdt_fileskipPinNoFault();

// skip memory elements
void mdt_fileskipDataSize();
void mdt_fileskipAddrSize();
void mdt_fileskipRom();
void mdt_fileskipRam();
void mdt_fileskipCram();
void mdt_fileskipMinAddr();
void mdt_fileskipMaxAddr();
void mdt_fileskipReadOff();
void mdt_fileskipInitFile();
void mdt_fileskipEdgeTrigger();
void mdt_fileskipAddrType();
void mdt_fileskipRrConflict();
void mdt_fileskipRwConflict();
void mdt_fileskipWriteContention();
void mdt_fileskipOverwrite();

// skip complex file supports
void mdt_fileskipMacro();
void mdt_fileskipAlias();
void mdt_fileskipInclude();

#define YY_NO_UNPUT 1
#define SCAN_DEF 1

#define CELL_TYPE 2
#define USED 3
#define CLOCK 4
#define NO_FAULT 5
#define FUNCTION 6
#define FAULT 7
#define SET_CLK 8
#define RESET_CLK 9
#define BUS_KEEPER 10

#define ARRAY_DEL 11
#define ARRAY 12
#define PULSE 13

#define DATA_SIZE 14
#define ADDR_SIZE 15
#define ROM 16
#define RAM 17
#define CRAM 18
#define MIN_ADDR 19
#define MAX_ADDR 20
#define READ_OFF 21
#define INIT_FILE 22

#define EDGE_TRIGGER 23
#define ADDR_TYPE 24
#define RR_CONFLICT 25
#define RW_CONFLICT 26
#define WRT_CONTENTION 27
#define OVERWRITE 28

#define MACRO 29
#define ALIAS 30
#define INCLUDE 31

#line 900 "lib/opt/lex_n_yacc/mdt_file.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO( (void));
#else
extern int yywrap YY_PROTO( (void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO( ( int c, char *buf_ptr ) );
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO( (char *, yyconst char *, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO( (yyconst char *));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO( (void));
#else
static int input YY_PROTO( (void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO( ( int new_state ) );
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO( (void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO( (void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void)fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT( buf, result, max_size )                                         \
	if ( yy_current_buffer->yy_is_interactive )                                     \
	{                                                                               \
		int c = '*', n;                                                               \
		for ( n = 0; n < max_size &&                                                  \
								 ( c = getc( yyin ) ) != EOF && c != '\n';                        \
					++n )                                                                   \
			buf[ n ] = (char)c;                                                         \
		if ( c == '\n' )                                                              \
			buf[ n++ ] = (char)c;                                                       \
		if ( c == EOF && ferror( yyin ) )                                             \
			YY_FATAL_ERROR( "input in flex scanner failed" );                           \
		result = n;                                                                   \
	}                                                                               \
	else                                                                            \
	{                                                                               \
		errno = 0;                                                                    \
		while ( ( result = fread( buf, 1, max_size, yyin ) ) == 0 && ferror( yyin ) ) \
		{                                                                             \
			if ( errno != EINTR )                                                       \
			{                                                                           \
				YY_FATAL_ERROR( "input in flex scanner failed" );                         \
				break;                                                                    \
			}                                                                           \
			errno = 0;                                                                  \
			clearerr( yyin );                                                           \
		}                                                                             \
	}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR( msg ) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO( (void))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 73 "src/mdt_file.l"

#line 1065 "lib/opt/lex_n_yacc/mdt_file.yy.cpp"

	if ( yy_init )
	{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( !yy_start )
			yy_start = 1; /* first start state */

		if ( !yyin )
			yyin = stdin;

		if ( !yyout )
			yyout = stdout;

		if ( !yy_current_buffer )
			yy_current_buffer =
					yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
	}

	while ( 1 ) /* loops until end-of-file is reached */
	{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
	yy_match:
		do
		{
			register YY_CHAR yy_c = yy_ec[ YY_SC_TO_UI( *yy_cp ) ];
			if ( yy_accept[ yy_current_state ] )
			{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
			}
			while ( yy_chk[ yy_base[ yy_current_state ] + yy_c ] != yy_current_state )
			{
				yy_current_state = (int)yy_def[ yy_current_state ];
				if ( yy_current_state >= 550 )
					yy_c = yy_meta[ (unsigned int)yy_c ];
			}
			yy_current_state = yy_nxt[ yy_base[ yy_current_state ] + (unsigned int)yy_c ];
			++yy_cp;
		} while ( yy_base[ yy_current_state ] != 1018 );

	yy_find_action:
		yy_act = yy_accept[ yy_current_state ];
		if ( yy_act == 0 )
		{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[ yy_current_state ];
		}

		YY_DO_BEFORE_ACTION;

	do_action: /* This label is used only to access EOF actions. */

		switch ( yy_act )
		{					/* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = yy_hold_char;
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;

			case 1:
				YY_RULE_SETUP
#line 75 "src/mdt_file.l"
						;
				YY_BREAK
			case 2:
				YY_RULE_SETUP
#line 77 "src/mdt_file.l"
				{
					mdt_fileparen++;
					BEGIN SCAN_DEF;
				}
				YY_BREAK
			case 3:
				YY_RULE_SETUP
#line 79 "src/mdt_file.l"
				{
					mdt_fileparen--;
					if ( mdt_fileparen == 0 )
					{
						mdt_fileskipScanDef();
						BEGIN( INITIAL );
					}
				}
				YY_BREAK
			case 4:
				YY_RULE_SETUP
#line 85 "src/mdt_file.l"
				{
					mdt_fileparen++;
				}
				YY_BREAK
			case 5:
				YY_RULE_SETUP
#line 86 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 6:
				YY_RULE_SETUP
#line 87 "src/mdt_file.l"

				YY_BREAK
			case 7:
				YY_RULE_SETUP
#line 90 "src/mdt_file.l"
				BEGIN CELL_TYPE;
				YY_BREAK
			case 8:
				YY_RULE_SETUP
#line 91 "src/mdt_file.l"
				{
					mdt_fileskipCellType();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 9:
				YY_RULE_SETUP
#line 93 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 10:
				YY_RULE_SETUP
#line 94 "src/mdt_file.l"

				YY_BREAK
			case 11:
				YY_RULE_SETUP
#line 97 "src/mdt_file.l"
				BEGIN USED;
				YY_BREAK
			case 12:
				YY_RULE_SETUP
#line 98 "src/mdt_file.l"
				{
					mdt_fileskipUsed();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 13:
				YY_RULE_SETUP
#line 100 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 14:
				YY_RULE_SETUP
#line 101 "src/mdt_file.l"

				YY_BREAK
			case 15:
				YY_RULE_SETUP
#line 104 "src/mdt_file.l"
				BEGIN CLOCK;
				YY_BREAK
			case 16:
				YY_RULE_SETUP
#line 105 "src/mdt_file.l"
				{
					mdt_fileskipClock();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 17:
				YY_RULE_SETUP
#line 107 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 18:
				YY_RULE_SETUP
#line 108 "src/mdt_file.l"

				YY_BREAK
			case 19:
				YY_RULE_SETUP
#line 111 "src/mdt_file.l"
				BEGIN NO_FAULT;
				YY_BREAK
			case 20:
				YY_RULE_SETUP
#line 112 "src/mdt_file.l"
				{
					mdt_fileskipNoFault();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 21:
				YY_RULE_SETUP
#line 114 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 22:
				YY_RULE_SETUP
#line 115 "src/mdt_file.l"

				YY_BREAK
			case 23:
				YY_RULE_SETUP
#line 118 "src/mdt_file.l"
				BEGIN FUNCTION;
				YY_BREAK
			case 24:
				YY_RULE_SETUP
#line 119 "src/mdt_file.l"
				{
					mdt_fileskipFunction();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 25:
				YY_RULE_SETUP
#line 121 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 26:
				YY_RULE_SETUP
#line 122 "src/mdt_file.l"

				YY_BREAK
			case 27:
				YY_RULE_SETUP
#line 125 "src/mdt_file.l"
				BEGIN FAULT;
				YY_BREAK
			case 28:
				YY_RULE_SETUP
#line 126 "src/mdt_file.l"
				{
					mdt_fileskipFault();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 29:
				YY_RULE_SETUP
#line 128 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 30:
				YY_RULE_SETUP
#line 129 "src/mdt_file.l"

				YY_BREAK
			case 31:
				YY_RULE_SETUP
#line 132 "src/mdt_file.l"
				BEGIN SET_CLK;
				YY_BREAK
			case 32:
				YY_RULE_SETUP
#line 133 "src/mdt_file.l"
				{
					mdt_fileskipSetClk();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 33:
				YY_RULE_SETUP
#line 135 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 34:
				YY_RULE_SETUP
#line 136 "src/mdt_file.l"

				YY_BREAK
			case 35:
				YY_RULE_SETUP
#line 139 "src/mdt_file.l"
				BEGIN RESET_CLK;
				YY_BREAK
			case 36:
				YY_RULE_SETUP
#line 140 "src/mdt_file.l"
				{
					mdt_fileskipResetClk();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 37:
				YY_RULE_SETUP
#line 142 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 38:
				YY_RULE_SETUP
#line 143 "src/mdt_file.l"

				YY_BREAK
			case 39:
				YY_RULE_SETUP
#line 146 "src/mdt_file.l"
				BEGIN BUS_KEEPER;
				YY_BREAK
			case 40:
				YY_RULE_SETUP
#line 147 "src/mdt_file.l"
				{
					mdt_fileskipBusKeeper();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 41:
				YY_RULE_SETUP
#line 149 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 42:
				YY_RULE_SETUP
#line 150 "src/mdt_file.l"

				YY_BREAK
			case 43:
				YY_RULE_SETUP
#line 153 "src/mdt_file.l"
				BEGIN ARRAY_DEL;
				YY_BREAK
			case 44:
				YY_RULE_SETUP
#line 154 "src/mdt_file.l"
				{
					mdt_fileskipArrayDel();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 45:
				YY_RULE_SETUP
#line 156 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 46:
				YY_RULE_SETUP
#line 157 "src/mdt_file.l"

				YY_BREAK
			case 47:
				YY_RULE_SETUP
#line 160 "src/mdt_file.l"
				BEGIN ARRAY;
				YY_BREAK
			case 48:
				YY_RULE_SETUP
#line 161 "src/mdt_file.l"
				{
					mdt_fileskipArray();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 49:
				YY_RULE_SETUP
#line 163 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 50:
				YY_RULE_SETUP
#line 164 "src/mdt_file.l"

				YY_BREAK
			case 51:
				YY_RULE_SETUP
#line 167 "src/mdt_file.l"
				BEGIN PULSE;
				YY_BREAK
			case 52:
				YY_RULE_SETUP
#line 168 "src/mdt_file.l"
				{
					mdt_fileskipPulse();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 53:
				YY_RULE_SETUP
#line 170 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 54:
				YY_RULE_SETUP
#line 171 "src/mdt_file.l"

				YY_BREAK
			case 55:
				YY_RULE_SETUP
#line 174 "src/mdt_file.l"
				BEGIN ROM;
				YY_BREAK
			case 56:
				YY_RULE_SETUP
#line 175 "src/mdt_file.l"
				{
					mdt_fileskipRom();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 57:
				YY_RULE_SETUP
#line 177 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 58:
				YY_RULE_SETUP
#line 178 "src/mdt_file.l"

				YY_BREAK
			case 59:
				YY_RULE_SETUP
#line 181 "src/mdt_file.l"
				BEGIN RAM;
				YY_BREAK
			case 60:
				YY_RULE_SETUP
#line 182 "src/mdt_file.l"
				{
					mdt_fileskipRam();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 61:
				YY_RULE_SETUP
#line 184 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 62:
				YY_RULE_SETUP
#line 185 "src/mdt_file.l"

				YY_BREAK
			case 63:
				YY_RULE_SETUP
#line 188 "src/mdt_file.l"
				BEGIN CRAM;
				YY_BREAK
			case 64:
				YY_RULE_SETUP
#line 189 "src/mdt_file.l"
				{
					mdt_fileskipCram();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 65:
				YY_RULE_SETUP
#line 191 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 66:
				YY_RULE_SETUP
#line 192 "src/mdt_file.l"

				YY_BREAK
			case 67:
				YY_RULE_SETUP
#line 195 "src/mdt_file.l"
				BEGIN DATA_SIZE;
				YY_BREAK
			case 68:
				YY_RULE_SETUP
#line 196 "src/mdt_file.l"
				{
					mdt_fileskipDataSize();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 69:
				YY_RULE_SETUP
#line 198 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 70:
				YY_RULE_SETUP
#line 199 "src/mdt_file.l"

				YY_BREAK
			case 71:
				YY_RULE_SETUP
#line 202 "src/mdt_file.l"
				BEGIN ADDR_SIZE;
				YY_BREAK
			case 72:
				YY_RULE_SETUP
#line 203 "src/mdt_file.l"
				{
					mdt_fileskipAddrSize();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 73:
				YY_RULE_SETUP
#line 205 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 74:
				YY_RULE_SETUP
#line 206 "src/mdt_file.l"

				YY_BREAK
			case 75:
				YY_RULE_SETUP
#line 209 "src/mdt_file.l"
				BEGIN MIN_ADDR;
				YY_BREAK
			case 76:
				YY_RULE_SETUP
#line 210 "src/mdt_file.l"
				{
					mdt_fileskipMinAddr();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 77:
				YY_RULE_SETUP
#line 212 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 78:
				YY_RULE_SETUP
#line 213 "src/mdt_file.l"

				YY_BREAK
			case 79:
				YY_RULE_SETUP
#line 216 "src/mdt_file.l"
				BEGIN MAX_ADDR;
				YY_BREAK
			case 80:
				YY_RULE_SETUP
#line 217 "src/mdt_file.l"
				{
					mdt_fileskipMaxAddr();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 81:
				YY_RULE_SETUP
#line 219 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 82:
				YY_RULE_SETUP
#line 220 "src/mdt_file.l"

				YY_BREAK
			case 83:
				YY_RULE_SETUP
#line 223 "src/mdt_file.l"
				BEGIN READ_OFF;
				YY_BREAK
			case 84:
				YY_RULE_SETUP
#line 224 "src/mdt_file.l"
				{
					mdt_fileskipReadOff();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 85:
				YY_RULE_SETUP
#line 226 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 86:
				YY_RULE_SETUP
#line 227 "src/mdt_file.l"

				YY_BREAK
			case 87:
				YY_RULE_SETUP
#line 230 "src/mdt_file.l"
				BEGIN INIT_FILE;
				YY_BREAK
			case 88:
				YY_RULE_SETUP
#line 231 "src/mdt_file.l"
				{
					mdt_fileskipInitFile();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 89:
				YY_RULE_SETUP
#line 233 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 90:
				YY_RULE_SETUP
#line 234 "src/mdt_file.l"

				YY_BREAK
			case 91:
				YY_RULE_SETUP
#line 237 "src/mdt_file.l"
				BEGIN EDGE_TRIGGER;
				YY_BREAK
			case 92:
				YY_RULE_SETUP
#line 238 "src/mdt_file.l"
				{
					mdt_fileskipEdgeTrigger();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 93:
				YY_RULE_SETUP
#line 240 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 94:
				YY_RULE_SETUP
#line 241 "src/mdt_file.l"

				YY_BREAK
			case 95:
				YY_RULE_SETUP
#line 244 "src/mdt_file.l"
				BEGIN ADDR_TYPE;
				YY_BREAK
			case 96:
				YY_RULE_SETUP
#line 245 "src/mdt_file.l"
				{
					mdt_fileskipAddrType();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 97:
				YY_RULE_SETUP
#line 247 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 98:
				YY_RULE_SETUP
#line 248 "src/mdt_file.l"

				YY_BREAK
			case 99:
				YY_RULE_SETUP
#line 251 "src/mdt_file.l"
				BEGIN RR_CONFLICT;
				YY_BREAK
			case 100:
				YY_RULE_SETUP
#line 252 "src/mdt_file.l"
				{
					mdt_fileskipRrConflict();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 101:
				YY_RULE_SETUP
#line 254 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 102:
				YY_RULE_SETUP
#line 255 "src/mdt_file.l"

				YY_BREAK
			case 103:
				YY_RULE_SETUP
#line 258 "src/mdt_file.l"
				BEGIN RW_CONFLICT;
				YY_BREAK
			case 104:
				YY_RULE_SETUP
#line 259 "src/mdt_file.l"
				{
					mdt_fileskipRwConflict();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 105:
				YY_RULE_SETUP
#line 261 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 106:
				YY_RULE_SETUP
#line 262 "src/mdt_file.l"

				YY_BREAK
			case 107:
				YY_RULE_SETUP
#line 265 "src/mdt_file.l"
				BEGIN WRT_CONTENTION;
				YY_BREAK
			case 108:
				YY_RULE_SETUP
#line 266 "src/mdt_file.l"
				{
					mdt_fileskipWriteContention();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 109:
				YY_RULE_SETUP
#line 268 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 110:
				YY_RULE_SETUP
#line 269 "src/mdt_file.l"

				YY_BREAK
			case 111:
				YY_RULE_SETUP
#line 272 "src/mdt_file.l"
				BEGIN OVERWRITE;
				YY_BREAK
			case 112:
				YY_RULE_SETUP
#line 273 "src/mdt_file.l"
				{
					mdt_fileskipOverwrite();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 113:
				YY_RULE_SETUP
#line 275 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 114:
				YY_RULE_SETUP
#line 276 "src/mdt_file.l"

				YY_BREAK
			case 115:
				YY_RULE_SETUP
#line 279 "src/mdt_file.l"
				BEGIN MACRO;
				YY_BREAK
			case 116:
				YY_RULE_SETUP
#line 280 "src/mdt_file.l"
				{
					mdt_fileparen--;
					if ( mdt_fileparen == 0 )
					{
						mdt_fileskipMacro();
						BEGIN( INITIAL );
					}
				}
				YY_BREAK
			case 117:
				YY_RULE_SETUP
#line 286 "src/mdt_file.l"
				{
					mdt_fileparen++;
				}
				YY_BREAK
			case 118:
				YY_RULE_SETUP
#line 287 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 119:
				YY_RULE_SETUP
#line 288 "src/mdt_file.l"

				YY_BREAK
			case 120:
				YY_RULE_SETUP
#line 291 "src/mdt_file.l"
				BEGIN ALIAS;
				YY_BREAK
			case 121:
				YY_RULE_SETUP
#line 292 "src/mdt_file.l"
				{
					mdt_fileline++;
					mdt_fileskipAlias();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 122:
				YY_RULE_SETUP
#line 295 "src/mdt_file.l"

				YY_BREAK
			case 123:
				YY_RULE_SETUP
#line 298 "src/mdt_file.l"
				BEGIN INCLUDE;
				YY_BREAK
			case 124:
				YY_RULE_SETUP
#line 299 "src/mdt_file.l"
				{
					mdt_fileline++;
					mdt_fileskipInclude();
					BEGIN( INITIAL );
				}
				YY_BREAK
			case 125:
				YY_RULE_SETUP
#line 302 "src/mdt_file.l"

				YY_BREAK
			case 126:
				YY_RULE_SETUP
#line 305 "src/mdt_file.l"
				{
					return MODEL;
				}
				YY_BREAK
			case 127:
				YY_RULE_SETUP
#line 306 "src/mdt_file.l"
				{
					return MODEL_SOURCE;
				}
				YY_BREAK
			case 128:
				YY_RULE_SETUP
#line 307 "src/mdt_file.l"
				{
					return INPUT;
				}
				YY_BREAK
			case 129:
				YY_RULE_SETUP
#line 308 "src/mdt_file.l"
				{
					return OUTPUT;
				}
				YY_BREAK
			case 130:
				YY_RULE_SETUP
#line 309 "src/mdt_file.l"
				{
					return INOUT;
				}
				YY_BREAK
			case 131:
				YY_RULE_SETUP
#line 310 "src/mdt_file.l"
				{
					return INTERN;
				}
				YY_BREAK
			case 132:
				YY_RULE_SETUP
#line 311 "src/mdt_file.l"
				{
					return PRIMITIVE;
				}
				YY_BREAK
			case 133:
				YY_RULE_SETUP
#line 312 "src/mdt_file.l"
				{
					return INSTANCE;
				}
				YY_BREAK
			case 134:
				YY_RULE_SETUP
#line 314 "src/mdt_file.l"
				{
					char *pch = strrchr( mdt_filetext, ':' );
					int len = pch - mdt_filetext;
					strncpy( mdt_filelval.ychar, mdt_filetext, len );
					mdt_filelval.ychar[ len + 1 ] = '\0';
					mdt_fileskipPinNoFault();
					return NAME;
				}
				YY_BREAK
			case 135:
				YY_RULE_SETUP
#line 323 "src/mdt_file.l"
				{
					strcpy( mdt_filelval.ychar, mdt_filetext );
					return NAME;
				}
				YY_BREAK
			case 136:
				YY_RULE_SETUP
#line 328 "src/mdt_file.l"
				{
					return mdt_filetext[ 0 ];
				}
				YY_BREAK
			case 137:
				YY_RULE_SETUP
#line 329 "src/mdt_file.l"
				{
					return mdt_filetext[ 0 ];
				}
				YY_BREAK
			case 138:
				YY_RULE_SETUP
#line 330 "src/mdt_file.l"
				{
					return mdt_filetext[ 0 ];
				}
				YY_BREAK
			case 139:
				YY_RULE_SETUP
#line 331 "src/mdt_file.l"
				{
					return mdt_filetext[ 0 ];
				}
				YY_BREAK
			case 140:
				YY_RULE_SETUP
#line 332 "src/mdt_file.l"
				{
					return mdt_filetext[ 0 ];
				}
				YY_BREAK
			case 141:
				YY_RULE_SETUP
#line 334 "src/mdt_file.l"
				{
					mdt_fileline++;
				}
				YY_BREAK
			case 142:
				YY_RULE_SETUP
#line 335 "src/mdt_file.l"
						;
				YY_BREAK
			case 143:
				YY_RULE_SETUP
#line 336 "src/mdt_file.l"
						;
				YY_BREAK
			case 144:
				YY_RULE_SETUP
#line 338 "src/mdt_file.l"
				ECHO;
				YY_BREAK
#line 1920 "lib/opt/lex_n_yacc/mdt_file.yy.cpp"
			case YY_STATE_EOF( INITIAL ):
			case YY_STATE_EOF( SCAN_DEF ):
			case YY_STATE_EOF( CELL_TYPE ):
			case YY_STATE_EOF( USED ):
			case YY_STATE_EOF( CLOCK ):
			case YY_STATE_EOF( NO_FAULT ):
			case YY_STATE_EOF( FUNCTION ):
			case YY_STATE_EOF( FAULT ):
			case YY_STATE_EOF( SET_CLK ):
			case YY_STATE_EOF( RESET_CLK ):
			case YY_STATE_EOF( BUS_KEEPER ):
			case YY_STATE_EOF( ARRAY_DEL ):
			case YY_STATE_EOF( ARRAY ):
			case YY_STATE_EOF( PULSE ):
			case YY_STATE_EOF( DATA_SIZE ):
			case YY_STATE_EOF( ADDR_SIZE ):
			case YY_STATE_EOF( ROM ):
			case YY_STATE_EOF( RAM ):
			case YY_STATE_EOF( CRAM ):
			case YY_STATE_EOF( MIN_ADDR ):
			case YY_STATE_EOF( MAX_ADDR ):
			case YY_STATE_EOF( READ_OFF ):
			case YY_STATE_EOF( INIT_FILE ):
			case YY_STATE_EOF( EDGE_TRIGGER ):
			case YY_STATE_EOF( ADDR_TYPE ):
			case YY_STATE_EOF( RR_CONFLICT ):
			case YY_STATE_EOF( RW_CONFLICT ):
			case YY_STATE_EOF( WRT_CONTENTION ):
			case YY_STATE_EOF( OVERWRITE ):
			case YY_STATE_EOF( MACRO ):
			case YY_STATE_EOF( ALIAS ):
			case YY_STATE_EOF( INCLUDE ):
				yyterminate();

			case YY_END_OF_BUFFER:
			{
				/* Amount of text matched not including the EOB char. */
				int yy_amount_of_matched_text = (int)( yy_cp - yytext_ptr ) - 1;

				/* Undo the effects of YY_DO_BEFORE_ACTION. */
				*yy_cp = yy_hold_char;
				YY_RESTORE_YY_MORE_OFFSET

				if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
				{
					/* We're scanning a new file or input source.  It's
					 * possible that this happened because the user
					 * just pointed yyin at a new source and called
					 * yylex().  If so, then we have to assure
					 * consistency between yy_current_buffer and our
					 * globals.  Here is the right place to do so, because
					 * this is the first action (other than possibly a
					 * back-up) that will match for the new input source.
					 */
					yy_n_chars = yy_current_buffer->yy_n_chars;
					yy_current_buffer->yy_input_file = yyin;
					yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
				}

				/* Note that here we test for yy_c_buf_p "<=" to the position
				 * of the first EOB in the buffer, since yy_c_buf_p will
				 * already have been incremented past the NUL character
				 * (since all states make transitions on EOB to the
				 * end-of-buffer state).  Contrast this with the test
				 * in input().
				 */
				if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[ yy_n_chars ] )
				{ /* This was really a NUL. */
					yy_state_type yy_next_state;

					yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

					yy_current_state = yy_get_previous_state();

					/* Okay, we're now positioned to make the NUL
					 * transition.  We couldn't have
					 * yy_get_previous_state() go ahead and do it
					 * for us because it doesn't know how to deal
					 * with the possibility of jamming (and we don't
					 * want to build jamming into it because then it
					 * will run more slowly).
					 */

					yy_next_state = yy_try_NUL_trans( yy_current_state );

					yy_bp = yytext_ptr + YY_MORE_ADJ;

					if ( yy_next_state )
					{
						/* Consume the NUL. */
						yy_cp = ++yy_c_buf_p;
						yy_current_state = yy_next_state;
						goto yy_match;
					}

					else
					{
						yy_cp = yy_c_buf_p;
						goto yy_find_action;
					}
				}

				else
					switch ( yy_get_next_buffer() )
					{
						case EOB_ACT_END_OF_FILE:
						{
							yy_did_buffer_switch_on_eof = 0;

							if ( yywrap() )
							{
								/* Note: because we've taken care in
								 * yy_get_next_buffer() to have set up
								 * yytext, we can now set up
								 * yy_c_buf_p so that if some total
								 * hoser (like flex itself) wants to
								 * call the scanner after we return the
								 * YY_NULL, it'll still work - another
								 * YY_NULL will get returned.
								 */
								yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

								yy_act = YY_STATE_EOF( YY_START );
								goto do_action;
							}

							else
							{
								if ( !yy_did_buffer_switch_on_eof )
									YY_NEW_FILE;
							}
							break;
						}

						case EOB_ACT_CONTINUE_SCAN:
							yy_c_buf_p =
									yytext_ptr + yy_amount_of_matched_text;

							yy_current_state = yy_get_previous_state();

							yy_cp = yy_c_buf_p;
							yy_bp = yytext_ptr + YY_MORE_ADJ;
							goto yy_match;

						case EOB_ACT_LAST_MATCH:
							yy_c_buf_p =
									&yy_current_buffer->yy_ch_buf[ yy_n_chars ];

							yy_current_state = yy_get_previous_state();

							yy_cp = yy_c_buf_p;
							yy_bp = yytext_ptr + YY_MORE_ADJ;
							goto yy_find_action;
					}
				break;
			}

			default:
				YY_FATAL_ERROR(
						"fatal flex scanner internal error--no action found" );
		} /* end of action switch */
	}		/* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[ yy_n_chars + 1 ] )
		YY_FATAL_ERROR(
				"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
	{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
		{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int)( yy_c_buf_p - yytext_ptr ) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*( dest++ ) = *( source++ );

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
	{
		int num_to_read =
				yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
		{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
					"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
					(int)( yy_c_buf_p - b->yy_ch_buf );

			if ( b->yy_is_our_buffer )
			{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
						/* Include room in for 2 EOB chars. */
						yy_flex_realloc( (void *)b->yy_ch_buf,
														 b->yy_buf_size + 2 );
			}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( !b->yy_ch_buf )
				YY_FATAL_ERROR(
						"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[ yy_c_buf_p_offset ];

			num_to_read = yy_current_buffer->yy_buf_size -
										number_to_move - 1;
#endif
		}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( ( &yy_current_buffer->yy_ch_buf[ number_to_move ] ),
							yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	if ( yy_n_chars == 0 )
	{
		if ( number_to_move == YY_MORE_ADJ )
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
					YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[ yy_n_chars ] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[ yy_n_chars + 1 ] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[ 0 ];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
		register YY_CHAR yy_c = ( *yy_cp ? yy_ec[ YY_SC_TO_UI( *yy_cp ) ] : 1 );
		if ( yy_accept[ yy_current_state ] )
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
		while ( yy_chk[ yy_base[ yy_current_state ] + yy_c ] != yy_current_state )
		{
			yy_current_state = (int)yy_def[ yy_current_state ];
			if ( yy_current_state >= 550 )
				yy_c = yy_meta[ (unsigned int)yy_c ];
		}
		yy_current_state = yy_nxt[ yy_base[ yy_current_state ] + (unsigned int)yy_c ];
	}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[ yy_current_state ] )
	{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
	}
	while ( yy_chk[ yy_base[ yy_current_state ] + yy_c ] != yy_current_state )
	{
		yy_current_state = (int)yy_def[ yy_current_state ];
		if ( yy_current_state >= 550 )
			yy_c = yy_meta[ (unsigned int)yy_c ];
	}
	yy_current_state = yy_nxt[ yy_base[ yy_current_state ] + (unsigned int)yy_c ];
	yy_is_jam = ( yy_current_state == 549 );

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp ) int c;
register char *yy_bp;
#endif
{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[ yy_current_buffer->yy_buf_size + 2 ];
		register char *source =
				&yy_current_buffer->yy_ch_buf[ number_to_move ];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int)( dest - source );
		yy_bp += (int)( dest - source );
		yy_current_buffer->yy_n_chars =
				yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

	*--yy_cp = (char)c;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
}
#endif /* ifndef YY_NO_UNPUT */

#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[ yy_n_chars ] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
		{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
			{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
				{
					if ( yywrap() )
						return EOF;

					if ( !yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
				}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
			}
		}
	}

	c = *(unsigned char *)yy_c_buf_p; /* cast for 8-bit char's */
	*yy_c_buf_p = '\0';								/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
}

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
		FILE *input_file;
#endif
{
	if ( !yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
}

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
		YY_BUFFER_STATE new_buffer;
#endif
{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
}

#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
}

#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( !b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *)yy_flex_alloc( b->yy_buf_size + 2 );
	if ( !b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
		YY_BUFFER_STATE b;
#endif
{
	if ( !b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE)0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *)b->yy_ch_buf );

	yy_flex_free( (void *)b );
}

#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO( (int));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
		YY_BUFFER_STATE b;
FILE *file;
#endif

{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? ( isatty( fileno( file ) ) > 0 ) : 0;
#endif
#endif
}

#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
		YY_BUFFER_STATE b;
#endif

{
	if ( !b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[ 0 ] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[ 1 ] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[ 0 ];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
			 base[ size - 2 ] != YY_END_OF_BUFFER_CHAR ||
			 base[ size - 1 ] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE)yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( !b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
}
#endif

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
{
	int len;
	for ( len = 0; yy_str[ len ]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
}
#endif

#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *)yy_flex_alloc( n );
	if ( !buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[ i ] = bytes[ i ];

	buf[ len ] = buf[ len + 1 ] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( !b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
#endif

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state ) int new_state;
#endif
{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
	{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( !yy_start_stack )
			yy_start_stack = (int *)yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *)yy_flex_realloc(
					(void *)yy_start_stack, new_size );

		if ( !yy_start_stack )
			YY_FATAL_ERROR(
					"out of memory expanding start-condition stack" );
	}

	yy_start_stack[ yy_start_stack_ptr++ ] = YY_START;

	BEGIN( new_state );
}
#endif

#ifndef YY_NO_POP_STATE
static void yy_pop_state()
{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN( yy_start_stack[ yy_start_stack_ptr ] );
}
#endif

#ifndef YY_NO_TOP_STATE
static int yy_top_state()
{
	return yy_start_stack[ yy_start_stack_ptr - 1 ];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg ) char msg[];
#endif
{
	(void)fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless( n )                          \
	do                                         \
	{                                          \
		/* Undo effects of setting up yytext. */ \
		yytext[ yyleng ] = yy_hold_char;         \
		yy_c_buf_p = yytext + n;                 \
		yy_hold_char = *yy_c_buf_p;              \
		*yy_c_buf_p = '\0';                      \
		yyleng = n;                              \
	} while ( 0 )

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n ) char *s1;
yyconst char *s2;
int n;
#endif
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[ i ] = s2[ i ];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
{
	register int n;
	for ( n = 0; s[ n ]; ++n )
		;

	return n;
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
{
	return (void *)malloc( size );
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size ) void *ptr;
yy_size_t size;
#endif
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *)realloc( (char *)ptr, size );
}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr ) void *ptr;
#endif
{
	free( ptr );
}

#if YY_MAIN
int main()
{
	yylex();
	return 0;
}
#endif
#line 338 "src/mdt_file.l"

void mdt_fileskipScanDef()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `scan_definition' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipCellType()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `cell_type' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipUsed()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `used' attribute " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipClock()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `clock' attribute " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipNoFault()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `no_fault' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipFunction()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `function' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipFault()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `fault' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipSetClk()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `set_clock_conflict' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipResetClk()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `reset_clock_conflict' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipBusKeeper()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `bus_keeper' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipArrayDel()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `array_delimiter' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipArray()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `array' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipPulse()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `_pulse_generator' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipPinNoFault()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `pin no fault' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipDataSize()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `data_size' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipAddrSize()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `address_size' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipRom()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `ROM' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipRam()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `RAM' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipCram()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `CRAM' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipMinAddr()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `min_address' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipMaxAddr()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `max_address' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipReadOff()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `read_off' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipInitFile()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `init_file' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipEdgeTrigger()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `edge_trigger' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipAddrType()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `address_type' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipRrConflict()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `read_read_conflict' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipRwConflict()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `read_write_conflict' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipWriteContention()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `write_contention' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipOverwrite()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `overwrite' " );
		fprintf( stderr, "attribute skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipMacro()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `macro' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipAlias()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `alias' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}

void mdt_fileskipInclude()
{
	if ( mdt_filewarning )
	{
		fprintf( stderr, "**WARN mdt_filelex(): `include' " );
		fprintf( stderr, "skipped near line %d\n", mdt_fileline );
	}
}
